# Title of the IDE
title = AxeSki Visual IDE
# Describes the menu bar
file = File
settings = Settings
program = Program
# Describes the file menu
open = Open
save = Save
clear = Clear console
new = New
newFile = Opening a new project
# Describes the language menu
lang = Language
english = English
dutch = Dutch
# Describes the program menu
data = Data Editor 
advanced = Advanced
release = Run
run = Run
compile = Compile
debug = Debug
compileDebug = Compile debug
runDebug = Run debug
stopDebug = Stop debug
stepDebug = Step debug
step = Step
stop = Stop
welcome = Welcome
canvas = Canvas
Intro = Welcome to the Visual IDE
# Describes the event menu
eventMenu = Event
eventMenuDescription = This item opens the Event view
# Describes the class menu
classMenu = Class
noClass = No Class available
classMenuDescription = This item opens the Class view
# Describes the frame menu
frameMenu = Frame
frameMenuDescription = This item opens the Frame view
# Describes the Event Creation view
addEventButton = New Event
addEventDialog = Add new Event
addEvent = add
removeEvent = Delete Event
addEventCancel = cancel
addEventFail = Event type already exists.
# Describes the VariableView
varType = type
varName = name
TypeNull = Null
TypeNumber = Number
TypeString = string
TypeBoolean = Boolean
# Describes the EventView
addMemberButton = add member
addMemberError = The name of the new member already exists.
# Describes the Event Creation view
addClasslabel = New Class
addClassDialog = Add Class
addClass = add
addClassCancel = cancel
addClassFail = Class does already exist.
# Describes the WireFrame
addInstanceDialog = Enter a name for the instance
addInstance = set
addInstanceCancel = cancel
addInstanceFail = Instance does already exist.
filter = Filter
# Describes the Event Creation view
addEventToClass = add
# Describes the different categories of blocks
varCat = Variables and types
funcCat = Functions and handlers
condCat = Conditions
physCat = Physics
locksCat = Locks
trivCat = Trivia
mathCat = Math
stringCat = String
blockborder = Blocks
loadedborder = Selected
classInstanceborder = Classes
# Describes console output for running
isNotRunning = [IDE] Program is not running.
programEnd = [IDE] Program has ended.
notCompiled = [IDE] Program is not compiled.
startRunning = [IDE] Start execution\n============
isRunning = [IDE] The program is already running
stopRunning = ============\n[IDE] Stop execution
startCompile = [IDE] Start compiling...
endCompile = [IDE] End compilation.
failCompile = [IDE] Compilatie failed.
useData = [IDE] Using data editor file.
inDebug = [IDE] In Debug Mode.
notDebug = [IDE] Not in Debug Mode.
break = [IDE] Break
#Describe the class view
inpEvent = Input Events
# Input for saving and loading
loadFail = [IDE] Loading has failed.
startLoad = [IDE] Loading has started.
endLoad = [IDE] Loading has ended.
startSave = [IDE] Saving has started.
endSave = [IDE] Saving had ended.
warning = Are you sure you want to start a new Project?
warningKey = Warning
# Describes the right mouse click popup for blocks
removeBlock = Remove
breakBlock = Breakpoint
# Input and creating new membervariables within a class.
removeMemberVar= remove
addMemberVar = new
addMemberDialog = new member
addMemberVarButton = add
addMemberVarCancel = cancel
addMemberFail = member of given name already exists
noMembers = no members defined.
makeRefMember = make reference


addFunctionDialog = add Function
addFunctionFail = Function has no name
addFunction = add
cancelFunction = cancel
removeParamVar= remove
addParamVar = new
addParamDialog = new parameter
addParamVarButton = add
addParamVarCancel = cancel
addParamFail = parameter of given name already exists
noParams = no parameters defined.
returnLabel = Return Type:

IDEremovewire = Remove wire
IDEdeselectBlock = Deselect Block

Bprint = print
Bvalue = value
Bset = set
Bmake = make var
Bif = if
Bwhile = while
Bemit = emit
Bhandler= handler
Bappear= set costume
Block = lock
Bunlock = unlock
Bsleep = sleep
Brandom = random
Bhide = hide
Bshow = show
Bconcat = concat
Blength = length
Bcharat = charat
Belse = else
Breturn = return
Bfunction = function
Baccess = access
Bifelse = if..else
Bforever = forever
Bmove = move
Bbinop = operator
Bacces = access
bfunccall = call
#costumes
costumes = Costumes
setPrimary = set primary
addCostume = add costume
removeCostume = remove costume
costumeNotFound = image loading failed or no file selected
addCostumeDialog = add costume
addCostumeButton = add
addCostumeCancel = cancel
addCostumeOpenButton = open
addCostumeFail = name has already been taken
noCostume =  (no image available)
costumeName = name
#instanceview
inputEvents = Input Events
OutputEvents = Output Events

changeName = Change Name
help = Help


#help
BprintHelp = Prints the value of its inner component as a String to the console.
BvalueHelp = Input field for literals. \n(if a Variable of type number is set to a literal, \nthe program will attempt to parse the literal)
BsetHelp = Sets the value of the left hand side variable \nequal to the value of the variable or value on the right hand side.\n If the right hand side is a Variable \n and its type doesn't match that of the left hand side \na red border will indicate an error.
BmakeHelp = Creates a new Variable with given unique name and type. \nScope of the variable is the Toplevel to which it belongs \n(Handler or Function). \nThe button on the right end of the block will create a reference to this Variable.
BifHelp = If the condition in the condition box evaluates to true the body of the if block will be executed.\n If the condition doesn't return a boolean or a value a red border will indicate an error. 
BwhileHelp =  As long as the condition in the condition box evaluates to true the body of the if block will be executed.\n If the condition doesn't return a boolean or a value a red border will indicate an error. 
BemitHelp = The dropdown menu will show all possible events to emit in the program. \nIf a selected event has members, \nfields will be shown to set the value of the member equal to that of a variable set in the box. \nIf no event of this type was emitted by this class, \nall its intances will now have an output event of the type of the selected event. \nRemoving this emit block will have the complementary result. 
BhandlerHelp = A handler handles the input event to which its connect via the rectangle button on the top left of this block.\n If connected an access block can access the members of the event. 
BappearHelp = Sets the appearance of the instance to String given by the execution of its inner component if it exist. 
BlockHelp = Locks the given Variable. If this is not a member, nothing will be locked. 
BunlockHelp = UnLocks the given Variable. If this is not a member, nothing will be locked.
BsleepHelp = Pauses in this place for given amount of seconds.
BrandomHelp = Generates a number variable with value between 0.0-1.0.
BhideHelp = Hides the instance in the canvas.
BshowHelp = Shows the instance in the canvas.
BconcatHelp = Concatenate the variables/values as Strings and returns a new String variable.
BlengthHelp = Returns the length of a given String.
BcharatHelp = Returns the character at the given right hand side Number Variable index in the given left hand side String variable.
BelseHelp = ... 
BreturnHelp = If the return is in a function it will return from that function \nand check if the type of return equals the set return type of the function. \nIf placed in handler it returns from that handler.
BfunctionHelp = Function definition. \nHovering over the parameters will show their type. \nClicking on a parameter will create a reference to that parameter.
BaccessHelp = Access block is only usable in a handler connected to a input event. \nIf placed in such handler all members of the event will be available for selection. \nThe value of the selected member of the event will be returned. 
BifelseHelp = If the condition in the condition box evaluates to true the body of the if block will be executed \notherwise the body of the else will be executed. \nIf the condition doesn't return a boolean or a value a red border will indicate an error. 
BforeverHelp = The body of this block will be repeat forever.
BmoveHelp = Moves the instance in the canvas x- and y-pixels relative to its current position.
BbinopHelp = Executes the currently set operation on the given variable(s), \n and returns a variable of the correct type. \nIf operation is not possible on given variable(s) a red border will indicate an error. \nFor detailed description of operations and return types check manual.
bfunccallHelp = A function call, this calls the function belonging to the call-block. \nParameters that aren't filled in, are set to default values. \nThe return value doesn't need to be captured. \nIf you try to catch an return value but no return was done, the program will generate a runtime error
